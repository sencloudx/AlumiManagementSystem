<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
           
	<!-- 配置数据源,导入c3p0-0.9.1.2.jar,mysql-connector-java-5.1.7-bin.jar -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>com.mysql.jdbc.Driver</value>
		</property>
		<property name="jdbcUrl">
			<value>jdbc:mysql://localhost:3306/infor_manage?characterEncoding=utf-8</value>
		</property>
		<property name="user">
			<value>root</value>
		</property>
		<property name="password">
			<value></value>
		</property><!--
		初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 
		--><property name="initialPoolSize" value="1"/><!--
		连接池中保留的最小连接数。
		--><property name="minPoolSize" value="1"/><!--	
		连接池中保留的最大连接数。Default: 15 
		--><property name="maxPoolSize" value="300"/><!--
		最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 
		--><property name="maxIdleTime" value="60"/><!--	
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 
		--><property name="acquireIncrement" value="5"/><!--	
		每60秒检查所有连接池中的空闲连接。Default: 0 
		--><property name="idleConnectionTestPeriod" value="60"/>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
       属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
       如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
		 <property name="maxStatements" value="0"/>
		<!--连接池用完时客户调用getConnection()后等待获取连接的时间，单位：毫秒。超时后会抛出-->
		 <!--SQLEXCEPTION，如果设置0，则无限等待。Default:0-->
		 <property name="checkoutTimeout" value="10000"/>
	</bean>
	
	<bean name="hibernateProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!--<prop key="hibernate.hbm2ddl.auto">update</prop> 
				--><prop key="hibernate.cache.provider_class">
					org.hibernate.cache.NoCacheProvider
				</prop>
				<!--<prop key="hibernate.show_sql">true</prop>
			--></props>
		</property>
	</bean>
	
	 <!--定义了Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties" ref="hibernateProperties" />
		<property name="mappingLocations">
			<list>
				<value>classpath*:sencloud/sl/entity/*.hbm.xml</value>
			</list>
		</property>
	</bean>
	


	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
	    <!--  事务拦截器bean需要依赖注入一个事务管理器 -->
        <property name="transactionManager" ref="transactionManager"/>
    	<property name="transactionAttributes">
		    <!--  下面配置事务属性-->
		    <props>
		    
		    <!--PROPAGATION_REQUIRE规则表示:在bean中所有以get开头的方法,当抛出异   
				常时,自动回滚,并只读，其他异常自动回滚-->  
		    
               	<!-- 事务处理，如果没有跟这里匹配的名，系统会默认是readOnly -->
               	<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
		    	<prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
		    	<prop key="*">ISOLATION_SERIALIZABLE</prop>  
		    </props>
	    </property>
	</bean>
	
	
	<!-- 定义BeanNameAutoProxyCreator-->
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
	    <!--  指定对满足哪些bean name的bean自动生成业务代理 -->
	    <property name="beanNames">
            <!--  下面是所有需要自动创建事务代理的bean-->
            <list>
                <value>*Service</value>
                <value>*DAO</value>
            </list>
            <!--  此处可增加其他需要自动创建事务代理的bean-->
	    </property>
        <!--  下面定义BeanNameAutoProxyCreator所需的事务拦截器-->
        <property name="interceptorNames">
            <list>
                <!-- 此处可增加其他新的Interceptor -->
                <value>transactionInterceptor</value> 
            </list>
        </property>
    </bean>
	<!-- 事务配置结束 -->
    
</beans>
